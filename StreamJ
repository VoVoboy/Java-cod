package j6j;

import java.util.*;
import java.util.stream.*;


public class HelloWorld extends Mod1{

	void ba(){
		
		//создать списочный массив значений типа Integer
		ArrayList<Integer> myList = new ArrayList<>( );
		myList.add(7);
		myList.add(18);
		myList.add(10);
		myList.add(24);
		myList.add(17);
		myList.add(5);
		
		System.out.println("Исходный список: " + myList);
		
		System.out.println("Создание списочного массива прошло успешно");
		
		
		HelloWorld hw = new HelloWorld();
		hw.fa();
		
	}
	
	public static void main(String[] args) {
		
		System.out.println("Hello World!)");
		
		
		HelloWorld hw = new HelloWorld();
		hw.ba();
		
	}

}

package j6j;

public class Mod1 extends Mod2{
	
	void fa(){
		
		//получить поток элементов списочного массива
		Stream<Integer> myStream = myList.stream();
		
		//получить минимальное и максимальное значение, вызвав
		//методы min(), max(), isPresent() и get()
		Optional<Integer> minVal = myStream.min(Integer::compare);
		if(minVal.isPresent()) System.out.println("Минимальное значение: " + minVal.get());
		
		System.out.println("Получение минимального значения прошло успещно");
		
		Mod1 m = new Mod1();
		m.ha();
		
	}
}
package j6j;

public class Mod2 extends Mod3{
	
	void ha(){
		
		//непременно получить новый поток данных, поскольку
		//предыдущий вызов метода min() стал оконечной операцией,
		//употребившей поток данных
		myStream = myList.stream();
		Optional<Integer> maxVal = myStream.max(Integer::compare);
		if(maxVal.isPresent()) System.out.println("Максимальное значение: " + maxVal.get());
		
		System.out.println("Получение максимального значения прошло успешно");
		
		Mod2 m = new Mod2();
		m.ja();
		
	}
}
package j6j;

public class Mod3 extends Mod4{
	
	void ja(){
		
		//отсортировать поток данных, вызвав метод sorted()
		Stream<Integer> sortedStream = myList.stream().sorted();
		
		//отобразить отсортированный поток данных, вызвав метод forEach()
		System.out.print("Отсортированный поток данных: ");
		sortedStream.forEach( (n) -> System.out.print(n + " "));
		System.out.println();
		
		System.out.println("Сортировка прошла успещно");
		
		Mod3 m3 = new Mod3();
		m3.ga();
		
	}
}
package j6j;

public class Mod4 extends Mod5{

	void ga(){

		//вывести только нечётные целочисленные значения,
		//вызвав метод filter()
		Stream<Integer> oddVals = myList.stream().sorted().filter( (n) -> (n % 2) == 1);
		System.out.print("Нечётные значения: ");
		oddVals.forEach( (n) -> System.out.print(n + " "));
		System.out.println();
		
		System.out.println("Вывод нечётных значений прошол успешно");
		
		
		Mod4 m4 = new Mod4();
		
		m4.ta();
		
	}
}
package j6j;

public class Mod5 {
	
	void ta(){
		
		//вывести только те нечётные целочисленные значения,
		//которые больше 5.
		oddVals = myList.stream().filter( (n) -> (n % 2) == 1).filter( (n) -> n > 5);
		System.out.print("Нечётные значения больше 5: ");
		oddVals.forEach( (n) -> System.out.print(n + " ") );
		System.out.println();
		
		
		HelloWorld m5 = new HelloWorld();
		m5.ba();
		
	}

}
